import { Tab, Slot, None, Insert } from './insert';


/**
 * A function for generating {@link Insert}s sequentially
 */
export type InsertsGenerator = (index: number) => Insert

/**
 * This module exports several {@link Insert}s sequences strategies: {@link fixed}, {@link flipflop}, {@link twoAndTwo} and {@link random}
 *
 * @module sequence
 */

/**
 * @type {InsertsGenerator}
 */
export function fixed(_n: number) {
  return Tab;
}

/**
 * Generates slots and tabs alternately
 *
 * @type {InsertsGenerator}
 */
export function flipflop(n: number) {
  return n % 2 === 0 ? Tab : Slot;
}

/**
 * Generates sequences of two slots and then two tabs
 *
 * @type {InsertsGenerator}
 */
export function twoAndTwo(n: number) {
  return n % 4 < 2 ? Tab : Slot;
}

/**
 * Generates tabs and slots in a psuedo-random way
 *
 * @type {InsertsGenerator}
 */
export function random(_: number) {
  return Math.random() < 0.5 ? Tab : Slot;
}

/**
 * An InsertSequence is a statefull object that
 * allows to generate {@link Insert}s sequences using an {@link InsertsGenerator} as strategy
 */
export class InsertSequence {
  generator: InsertsGenerator;
  n: number;
  _previous: Insert;
  _current: Insert;

  /**
   * @param {InsertsGenerator} generator the generator used by this sequence to produce inserts
   */
  constructor(generator: InsertsGenerator) {
    this.generator = generator;
    this.n = 0
    this._previous = None;
    this._current = None;
  }

  /**
   * The previously generated insert
   *
   * @returns {Insert}
   */
  previousComplement(): Insert {
    return this._previous.complement();
  }

  /**
   * Answers the last Insert generated by {@link InsertSequence#next}
   *
   * @returns {Insert}
   */
  current(max): Insert {
    if (this.n == max) {
      return None
    }
    return this._current;
  }

  /**
   * @returns {Insert}
   **/
  next(): Insert {
    this._previous = this._current;
    this._current = this.generator(this.n++);
    return this._current;
  }
}
